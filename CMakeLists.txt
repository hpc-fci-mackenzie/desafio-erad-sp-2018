cmake_minimum_required (VERSION 3.5.2)
set (CMAKE_BUILD_TYPE Release)

# Option to choose Probem(s)
set (PROBLEM "Both" CACHE STRING "Problems chosen by the user at CMake configure time")
set_property (CACHE PROBLEM PROPERTY STRINGS Both A B)
message (STATUS "Problem chosen: ${PROBLEM}")

# Option to choose default compilation - this is compiler dependable
option(ORIGINAL "Enable the original compiler & its options" ON)

if (ORIGINAL)
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -xHost -std=c99")
  message (STATUS "Original compiler & its options enabled")
  if (NOT "${CMAKE_C_COMPILER_ID}" MATCHES "Intel")
    message (WARNING "The compilation may fail")
  endif()
else()
  if ("${CMAKE_C_COMPILER_ID}" MATCHES "Cray")
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -h msglevel_3")
  elseif ("${CMAKE_C_COMPILER_ID}" MATCHES "Intel")
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fast -std=c99 -Wall")
  elseif ("${CMAKE_C_COMPILER_ID}" MATCHES "GNU")
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native -ffast-math -fno-cx-limited-range -funroll-loops --param max-unroll-times=2 -Wall")
  endif()
endif()
message (STATUS "Enabled optimization flags for ${CMAKE_C_COMPILER_ID} Compiler: ${CMAKE_C_FLAGS}")

if ("${PROBLEM}" MATCHES "Both")
  add_subdirectory(A)
  add_subdirectory(B)
elseif ("${PROBLEM}" MATCHES "A")
  add_subdirectory(A)
elseif ("${PROBLEM}" MATCHES "B")
  add_subdirectory(B)
else()
  message (FATAL_ERROR "Problem '${PROBLEM}' not recognized")
endif()

